
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_serial_hyperparameter_search.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_serial_hyperparameter_search.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_serial_hyperparameter_search.py:


Serial Hyperparameter optimization 
==================================

**Author(s)**: Romain Egele.

This example demonstrates how to run a serial execution (i.e., not parallel) of hyperparameter optimization. We start by defining the black-box function we want to optimize. For the purpose of simplicity we start by optimizing (maximising) the :math:`y = -x^2` function. This black-box function is often named ``run``-function inside DeepHyper. It takes as first argument an input-dictionnary ``config`` with a set of particular variable choices. It returns a single-scalar value which is maximised by DeepHyper.

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: default

    def run(config: dict) -> float:
        return -config["x"] ** 2









.. GENERATED FROM PYTHON SOURCE LINES 15-17

Then we define the variable(s) we want to optimize. In our case we have a single variable :math:`x` and we # define a input space in the :math:`[-10,10]` continuous interval by providing boundaries with ``float`` 
types.

.. GENERATED FROM PYTHON SOURCE LINES 17-25

.. code-block:: default

    from deephyper.problem import HpProblem


    problem = HpProblem()
    problem.add_hyperparameter((-10.0, 10.0), "x")

    print(problem)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Configuration space object:
      Hyperparameters:
        x, Type: UniformFloat, Range: [-10.0, 10.0], Default: 0.0





.. GENERATED FROM PYTHON SOURCE LINES 26-29

Then we define the evaluator which handles the execution of the black-box function. We decide to use the
``method="serial"`` which executes one run-function evaluation at a time without parallelism. We also
provide the ``TqdmCallback`` to have an interactive feedback on the advancement of the search.

.. GENERATED FROM PYTHON SOURCE LINES 29-38

.. code-block:: default

    from deephyper.evaluator import Evaluator
    from deephyper.evaluator.callback import TqdmCallback


    max_evals = 25
    evaluator = Evaluator.create(
        run, method="serial", method_kwargs={"callbacks": [TqdmCallback(max_evals)]}
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/25 [00:00<?, ?it/s]



.. GENERATED FROM PYTHON SOURCE LINES 39-40

Then, we define a centralized Bayesian optimization (CBO) search (i.e., master-worker architecture) where we decide to use the Gaussian-Process regressor which is efficient for few-serial iterations of Bayesian optimization.

.. GENERATED FROM PYTHON SOURCE LINES 40-48

.. code-block:: default

    from deephyper.search.hps import CBO


    search = CBO(problem, evaluator, surrogate_model="GP", random_state=42)
    results = search.search(max_evals)

    print(results)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      4%|4         | 1/25 [00:00<00:02, 10.82it/s, objective=-81.3]      8%|8         | 2/25 [00:00<00:01, 19.63it/s, objective=-81.3]      8%|8         | 2/25 [00:00<00:01, 19.63it/s, objective=-11.2]     12%|#2        | 3/25 [00:00<00:01, 19.63it/s, objective=-11.2]     16%|#6        | 4/25 [00:00<00:01, 19.63it/s, objective=-.663]     20%|##        | 5/25 [00:00<00:01, 19.63it/s, objective=-.663]     24%|##4       | 6/25 [00:00<00:00, 19.63it/s, objective=-.012]     28%|##8       | 7/25 [00:00<00:00, 19.63it/s, objective=-.012]     32%|###2      | 8/25 [00:00<00:00, 40.26it/s, objective=-.012]     32%|###2      | 8/25 [00:00<00:00, 40.26it/s, objective=-.012]     36%|###6      | 9/25 [00:00<00:00, 40.26it/s, objective=-.012]     40%|####      | 10/25 [00:00<00:00, 40.26it/s, objective=-.012]     44%|####4     | 11/25 [00:00<00:00, 40.26it/s, objective=-.00641]     48%|####8     | 12/25 [00:00<00:00, 22.32it/s, objective=-.00641]     48%|####8     | 12/25 [00:00<00:00, 22.32it/s, objective=-.000516]     52%|#####2    | 13/25 [00:00<00:00, 22.32it/s, objective=-.000516]     56%|#####6    | 14/25 [00:00<00:00, 22.32it/s, objective=-.000516]     60%|######    | 15/25 [00:00<00:00, 12.76it/s, objective=-.000516]     60%|######    | 15/25 [00:00<00:00, 12.76it/s, objective=-.000516]     64%|######4   | 16/25 [00:01<00:00, 12.76it/s, objective=-.000516]     68%|######8   | 17/25 [00:01<00:00, 10.20it/s, objective=-.000516]     68%|######8   | 17/25 [00:01<00:00, 10.20it/s, objective=-3.66e-6]     72%|#######2  | 18/25 [00:01<00:00, 10.20it/s, objective=-3.66e-6]     76%|#######6  | 19/25 [00:01<00:00,  8.72it/s, objective=-3.66e-6]     76%|#######6  | 19/25 [00:01<00:00,  8.72it/s, objective=-3.66e-6]     80%|########  | 20/25 [00:01<00:00,  8.72it/s, objective=-3.66e-6]     84%|########4 | 21/25 [00:01<00:00,  8.53it/s, objective=-3.66e-6]     84%|########4 | 21/25 [00:01<00:00,  8.53it/s, objective=-3.66e-6]     88%|########8 | 22/25 [00:01<00:00,  8.53it/s, objective=-3.66e-6]     92%|#########2| 23/25 [00:02<00:00,  7.51it/s, objective=-3.66e-6]     92%|#########2| 23/25 [00:02<00:00,  7.51it/s, objective=-3.66e-6]     96%|#########6| 24/25 [00:02<00:00,  6.93it/s, objective=-3.66e-6]     96%|#########6| 24/25 [00:02<00:00,  6.93it/s, objective=-3.66e-6]    100%|##########| 25/25 [00:02<00:00,  6.81it/s, objective=-3.66e-6]    100%|##########| 25/25 [00:02<00:00,  6.81it/s, objective=-3.66e-6]           x  job_id  objective  timestamp_submit  timestamp_gather
    0   9.014286       1 -81.257354          0.091988          0.092130
    1  -3.341758       2 -11.167347          0.101505          0.101629
    2  -6.309760       3 -39.813072          0.110202          0.110323
    3  -0.814151       4  -0.662842          0.118548          0.118659
    4  -8.103644       5 -65.669054          0.126269          0.126384
    5  -0.109659       6  -0.012025          0.134095          0.134203
    6   7.622038       7 -58.095456          0.141851          0.141961
    7   6.570092       8 -43.166114          0.213992          0.214114
    8  -7.094605       9 -50.333417          0.222047          0.222157
    9   8.143449      10 -66.315758          0.229732          0.229839
    10  0.080082      11  -0.006413          0.386673          0.386843
    11 -0.022713      12  -0.000516          0.496540          0.496683
    12  0.118126      13  -0.013954          0.684081          0.684248
    13  0.047275      14  -0.002235          0.814047          0.814216
    14 -0.031755      15  -0.001008          0.947534          0.947686
    15 -0.061662      16  -0.003802          1.147446          1.147619
    16 -0.001913      17  -0.000004          1.273443          1.273610
    17 -0.381414      18  -0.145476          1.400491          1.400661
    18 -0.097017      19  -0.009412          1.602914          1.603077
    19  0.035486      20  -0.001259          1.724445          1.724595
    20  0.190094      21  -0.036136          1.851608          1.851762
    21  0.068612      22  -0.004708          1.983427          1.983574
    22 -0.111490      23  -0.012430          2.203008          2.203166
    23  0.021274      24  -0.000453          2.404600          2.404775
    24  0.131814      25  -0.017375          2.562263          2.562413




.. GENERATED FROM PYTHON SOURCE LINES 49-50

A Pandas DataFrame is returned by the search from which we can plot the results.

.. GENERATED FROM PYTHON SOURCE LINES 50-58

.. code-block:: default

    import matplotlib.pyplot as plt


    plt.figure()
    plt.scatter(list(range(max_evals)), results.objective)
    plt.xlabel(r"Iterations")
    plt.ylabel(r"$-x^2$")
    plt.show()



.. image-sg:: /examples/images/sphx_glr_plot_serial_hyperparameter_search_001.png
   :alt: plot serial hyperparameter search
   :srcset: /examples/images/sphx_glr_plot_serial_hyperparameter_search_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.387 seconds)


.. _sphx_glr_download_examples_plot_serial_hyperparameter_search.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_serial_hyperparameter_search.py <plot_serial_hyperparameter_search.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_serial_hyperparameter_search.ipynb <plot_serial_hyperparameter_search.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
