
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_transfer_learning_for_hps.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_transfer_learning_for_hps.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_transfer_learning_for_hps.py:


Transfer Learning for Hyperparameter Search
===========================================

**Author(s)**: Romain Egele.

.. GENERATED FROM PYTHON SOURCE LINES 9-20

.. code-block:: default

    import functools


    def run(config: dict, N: int) -> float:
        y = -sum([config[f"x{i}"] ** 2 for i in range(N)])
        return y


    run_small = functools.partial(run, N=1)
    run_large = functools.partial(run, N=2)








.. GENERATED FROM PYTHON SOURCE LINES 21-30

.. code-block:: default

    from deephyper.problem import HpProblem


    N = 1
    problem_small = HpProblem()
    for i in range(N):
        problem_small.add_hyperparameter((-10.0, 10.0), f"x{i}")
    problem_small





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Configuration space object:
      Hyperparameters:
        x0, Type: UniformFloat, Range: [-10.0, 10.0], Default: 0.0




.. GENERATED FROM PYTHON SOURCE LINES 31-38

.. code-block:: default


    N = 2
    problem_large = HpProblem()
    for i in range(N):
        problem_large.add_hyperparameter((-10.0, 10.0), f"x{i}")
    problem_large





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Configuration space object:
      Hyperparameters:
        x0, Type: UniformFloat, Range: [-10.0, 10.0], Default: 0.0
        x1, Type: UniformFloat, Range: [-10.0, 10.0], Default: 0.0




.. GENERATED FROM PYTHON SOURCE LINES 39-51

.. code-block:: default

    from deephyper.evaluator import Evaluator
    from deephyper.evaluator.callback import TqdmCallback
    from deephyper.search.hps import CBO

    results = {}
    max_evals = 20
    evaluator_small = Evaluator.create(
        run_small, method="serial", method_kwargs={"callbacks": [TqdmCallback(max_evals)]}
    )
    search_small = CBO(problem_small, evaluator_small, random_state=42)
    results["Small"] = search_small.search(max_evals)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/20 [00:00<?, ?it/s]      5%|5         | 1/20 [00:00<00:01, 11.69it/s, objective=-35.2]     10%|#         | 2/20 [00:00<00:00, 21.34it/s, objective=-23.6]     15%|#5        | 3/20 [00:00<00:00, 29.71it/s, objective=-23.6]     15%|#5        | 3/20 [00:00<00:00, 29.71it/s, objective=-23.6]     20%|##        | 4/20 [00:00<00:00, 29.71it/s, objective=-23.6]     25%|##5       | 5/20 [00:00<00:00, 29.71it/s, objective=-23.6]     30%|###       | 6/20 [00:00<00:00, 29.71it/s, objective=-.545]     35%|###5      | 7/20 [00:00<00:00, 29.71it/s, objective=-.545]     40%|####      | 8/20 [00:00<00:00, 41.39it/s, objective=-.545]     40%|####      | 8/20 [00:00<00:00, 41.39it/s, objective=-.545]     45%|####5     | 9/20 [00:00<00:00, 41.39it/s, objective=-.545]     50%|#####     | 10/20 [00:00<00:00, 41.39it/s, objective=-.545]     55%|#####5    | 11/20 [00:00<00:00, 41.39it/s, objective=-.469]     60%|######    | 12/20 [00:00<00:00, 41.39it/s, objective=-.469]     65%|######5   | 13/20 [00:00<00:00, 11.81it/s, objective=-.469]     65%|######5   | 13/20 [00:00<00:00, 11.81it/s, objective=-.469]     70%|#######   | 14/20 [00:01<00:00, 11.81it/s, objective=-.469]     75%|#######5  | 15/20 [00:01<00:00, 11.81it/s, objective=-.469]     80%|########  | 16/20 [00:01<00:00,  7.46it/s, objective=-.469]     80%|########  | 16/20 [00:01<00:00,  7.46it/s, objective=-.469]     85%|########5 | 17/20 [00:01<00:00,  7.46it/s, objective=-.469]     90%|######### | 18/20 [00:02<00:00,  6.38it/s, objective=-.469]     90%|######### | 18/20 [00:02<00:00,  6.38it/s, objective=-.469]     95%|#########5| 19/20 [00:02<00:00,  6.38it/s, objective=-.469]    100%|##########| 20/20 [00:02<00:00,  5.40it/s, objective=-.469]    100%|##########| 20/20 [00:02<00:00,  5.40it/s, objective=-.469]



.. GENERATED FROM PYTHON SOURCE LINES 52-58

.. code-block:: default

    evaluator_large = Evaluator.create(
        run_large, method="serial", method_kwargs={"callbacks": [TqdmCallback(max_evals)]}
    )
    search_large = CBO(problem_large, evaluator_large, random_state=42)
    results["Large"] = search_large.search(max_evals)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


      0%|          | 0/20 [00:00<?, ?it/s]
      5%|5         | 1/20 [00:00<00:00, 138.18it/s, objective=-58.7]
     10%|#         | 2/20 [00:00<00:00, 113.43it/s, objective=-58.7]
     15%|#5        | 3/20 [00:00<00:00, 107.90it/s, objective=-58.7]
     20%|##        | 4/20 [00:00<00:00, 38.76it/s, objective=-58.7] 
     20%|##        | 4/20 [00:00<00:00, 38.76it/s, objective=-30.2]
     25%|##5       | 5/20 [00:00<00:00, 38.76it/s, objective=-30.2]
     30%|###       | 6/20 [00:00<00:00, 38.76it/s, objective=-30.2]
     35%|###5      | 7/20 [00:00<00:00, 38.76it/s, objective=-30.2]
     40%|####      | 8/20 [00:00<00:00, 38.76it/s, objective=-30.2]
     45%|####5     | 9/20 [00:00<00:00, 38.76it/s, objective=-30.2]
     50%|#####     | 10/20 [00:00<00:00, 38.76it/s, objective=-1.84]
     55%|#####5    | 11/20 [00:00<00:00, 23.98it/s, objective=-1.84]
     55%|#####5    | 11/20 [00:00<00:00, 23.98it/s, objective=-1.84]
     60%|######    | 12/20 [00:00<00:00, 23.98it/s, objective=-1.84]
     65%|######5   | 13/20 [00:00<00:00, 23.98it/s, objective=-1.84]
     70%|#######   | 14/20 [00:01<00:00,  9.66it/s, objective=-1.84]
     70%|#######   | 14/20 [00:01<00:00,  9.66it/s, objective=-1.84]
     75%|#######5  | 15/20 [00:01<00:00,  9.66it/s, objective=-.26] 
     80%|########  | 16/20 [00:01<00:00,  7.52it/s, objective=-.26]
     80%|########  | 16/20 [00:01<00:00,  7.52it/s, objective=-.26]
     85%|########5 | 17/20 [00:01<00:00,  7.52it/s, objective=-.26]
     90%|######### | 18/20 [00:02<00:00,  5.98it/s, objective=-.26]
     90%|######### | 18/20 [00:02<00:00,  5.98it/s, objective=-.26]
     95%|#########5| 19/20 [00:02<00:00,  5.61it/s, objective=-.26]
     95%|#########5| 19/20 [00:02<00:00,  5.61it/s, objective=-.26]
    100%|##########| 20/20 [00:02<00:00,  5.25it/s, objective=-.26]
    100%|##########| 20/20 [00:02<00:00,  5.25it/s, objective=-.26]



.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default

    evaluator_large_tl = Evaluator.create(
        run_large, method="serial", method_kwargs={"callbacks": [TqdmCallback(max_evals)]}
    )
    search_large_tl= CBO(problem_large, evaluator_large_tl, random_state=42)
    search_large_tl.fit_generative_model(results["Large"])
    results["Large+TL"] = search_large_tl.search(max_evals)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none



      0%|          | 0/20 [00:00<?, ?it/s]

      5%|5         | 1/20 [00:00<00:18,  1.05it/s]

      5%|5         | 1/20 [00:00<00:18,  1.05it/s, objective=-1.14]

     10%|#         | 2/20 [00:01<00:17,  1.05it/s, objective=-.392]

     15%|#5        | 3/20 [00:01<00:04,  3.45it/s, objective=-.392]

     15%|#5        | 3/20 [00:01<00:04,  3.45it/s, objective=-.392]

     20%|##        | 4/20 [00:01<00:04,  3.45it/s, objective=-.392]

     25%|##5       | 5/20 [00:01<00:02,  5.27it/s, objective=-.392]

     25%|##5       | 5/20 [00:01<00:02,  5.27it/s, objective=-.392]

     30%|###       | 6/20 [00:01<00:02,  5.27it/s, objective=-.109]

     35%|###5      | 7/20 [00:01<00:01,  7.52it/s, objective=-.109]

     35%|###5      | 7/20 [00:01<00:01,  7.52it/s, objective=-.109]

     40%|####      | 8/20 [00:01<00:01,  7.52it/s, objective=-.109]

     45%|####5     | 9/20 [00:01<00:01,  9.52it/s, objective=-.109]

     45%|####5     | 9/20 [00:01<00:01,  9.52it/s, objective=-.109]

     50%|#####     | 10/20 [00:01<00:01,  9.52it/s, objective=-.109]

     55%|#####5    | 11/20 [00:01<00:01,  6.79it/s, objective=-.109]

     55%|#####5    | 11/20 [00:01<00:01,  6.79it/s, objective=-.0767]

     60%|######    | 12/20 [00:02<00:01,  6.79it/s, objective=-.0767]

     65%|######5   | 13/20 [00:02<00:01,  4.93it/s, objective=-.0767]

     65%|######5   | 13/20 [00:02<00:01,  4.93it/s, objective=-.0706]

     70%|#######   | 14/20 [00:02<00:01,  4.45it/s, objective=-.0706]

     70%|#######   | 14/20 [00:02<00:01,  4.45it/s, objective=-.0706]

     75%|#######5  | 15/20 [00:03<00:01,  3.80it/s, objective=-.0706]

     75%|#######5  | 15/20 [00:03<00:01,  3.80it/s, objective=-.0706]

     80%|########  | 16/20 [00:03<00:01,  3.53it/s, objective=-.0706]

     80%|########  | 16/20 [00:03<00:01,  3.53it/s, objective=-.0706]

     85%|########5 | 17/20 [00:03<00:00,  3.39it/s, objective=-.0706]

     85%|########5 | 17/20 [00:03<00:00,  3.39it/s, objective=-.0706]

     90%|######### | 18/20 [00:04<00:00,  3.27it/s, objective=-.0706]

     90%|######### | 18/20 [00:04<00:00,  3.27it/s, objective=-.0706]

     95%|#########5| 19/20 [00:04<00:00,  2.99it/s, objective=-.0706]

     95%|#########5| 19/20 [00:04<00:00,  2.99it/s, objective=-.0706]

    100%|##########| 20/20 [00:05<00:00,  2.98it/s, objective=-.0706]

    100%|##########| 20/20 [00:05<00:00,  2.98it/s, objective=-.0706]



.. GENERATED FROM PYTHON SOURCE LINES 67-82

.. code-block:: default

    import matplotlib.pyplot as plt

    plt.figure()

    for strategy, df in results.items():
        x = [i for i in range(len(df))]
        plt.scatter(x, df.objective, label=strategy)
        plt.plot(x, df.objective.cummax())

    plt.xlabel("Time (sec.)")
    plt.ylabel("Objective")
    plt.grid()
    plt.legend()
    plt.show()




.. image-sg:: /examples/images/sphx_glr_plot_transfer_learning_for_hps_001.png
   :alt: plot transfer learning for hps
   :srcset: /examples/images/sphx_glr_plot_transfer_learning_for_hps_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.171 seconds)


.. _sphx_glr_download_examples_plot_transfer_learning_for_hps.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_transfer_learning_for_hps.py <plot_transfer_learning_for_hps.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_transfer_learning_for_hps.ipynb <plot_transfer_learning_for_hps.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
